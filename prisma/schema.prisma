datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "web3auth", "multisig"] // indexer, nft...

  // Only if you enable `postgresqlExtensions` preview feature
  // extensions        = [hstore(schema: "myHstoreSchema"), pg_trgm, postgis(version: "2.1")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "views"]

  // previewFeatures = ["postgresqlExtensions"]
}

model User {
  id String @id @unique

  address                             String    @unique
  avatar                              String?
  cover                               String?
  username                            String?
  email                               String?
  email_to_verify                     String?
  email_verified                      Boolean   @default(false)
  email_verification_token            String?
  email_verification_token_expires_at DateTime?
  email_verification_sent_at          DateTime?
  email_verified_at                   DateTime?

  beta_features String @default("")

  created_at DateTime @default(now())

  hidden Boolean @default(false)

  auth_session    UserSession[]
  key             UserKey[]
  tracks          tracks[]
  nftview         nftview[]
  private_uploads private_uploads[]

  @@schema("web3auth")
}

model UserSession {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@schema("web3auth")
}

model UserKey {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@schema("web3auth")
}

model DropNotifications {
  id         String   @id @unique
  user_id    String
  drop_id    String
  email      String
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([drop_id])
  @@schema("public")
}

model tracks {
  id               String   @id @unique
  user_id          String
  title            String?
  titleLocale      String?
  format           String?
  size             Int?
  license          String?
  artwork          String?
  artwork_ipfs_cid String?
  audio            String?
  audio_ipfs_cid   String?
  audio_mime_type  String?
  video            String?
  video_ipfs_cid   String?
  duration         Int?
  genre            String?
  country          String?
  explicit         String?  @default("Clean")
  description      String?
  liveRecording    Boolean? @default(false)
  lyrics           String?
  lyricsLocale     String?
  previousRelease  Boolean? @default(false)
  previewStartTime Int?     @default(0)
  previewDuration  Int?     @default(15000)

  video_format    String?
  video_bit_rate  Int?
  video_duration  Int?
  video_size      Int?
  video_mime_type String?

  version String?

  start_time Int?

  payment_address String?
  payment_denom   String?

  metadata_ipfs_cid String?

  status             TrackStatus                @default(Draft)
  nft_address        String?
  created_at         DateTime                   @default(now())
  updated_at         DateTime                   @default(now()) @updatedAt
  artists            track_artists[]
  authors_publishers track_authors_publishers[]
  royalties_info     track_royalties_info[]
  marketplace        track_marketplace[]

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@schema("public")
}

enum TrackStatus {
  Draft
  To_Mint
  Minted

  @@schema("public")
}

model track_artists {
  id       String  @id @unique
  track_id String
  address  String?
  name     String?
  role     String?
  track    tracks  @relation(fields: [track_id], references: [id])

  @@index([track_id])
  @@schema("public")
}

model track_authors_publishers {
  id       String  @id @unique
  track_id String
  address  String?
  name     String?
  role     String?
  track    tracks  @relation(fields: [track_id], references: [id])

  @@index([track_id])
  @@schema("public")
}

model track_royalties_info {
  id       String  @id @unique
  track_id String
  address  String?
  role     String?
  shares   Int?
  track    tracks  @relation(fields: [track_id], references: [id])

  @@index([track_id])
  @@schema("public")
}

model track_marketplace {
  id           String @id @unique
  track_id     String
  ratio        Int?
  creator_fee  Float?
  referral_fee Float?
  track        tracks @relation(fields: [track_id], references: [id])

  @@index([track_id])
  @@schema("public")
}

model music_nfts {
  id               String   @id @unique
  title            String
  titleLocale      String
  artwork          String
  audio            String
  audio_preview    String
  video            String?
  duration         Int
  version          String?
  genre            String
  liveRecording    Boolean  @default(false)
  pLine            String?
  cLine            String?
  country          String
  previousRelease  Boolean  @default(false)
  isrc             String?
  iswc             String?
  license          String
  previewStartTime Int?     @default(0)
  previewDuration  Int?     @default(15000)
  lyrics           String?
  lyricsLocale     String?
  explicit         String?  @default("Clean")
  label            String?
  featured         Boolean? @default(false)

  artists            music_nft_artists[]
  authors_publishers music_nft_authors_publishers[]
  files              music_nft_files[]

  @@schema("public")
}

model music_nft_artists {
  id        String     @id @unique
  nft_id    String
  address   String?
  name      String
  role      String
  music_nft music_nfts @relation(fields: [nft_id], references: [id])

  @@index([nft_id])
  @@index([address])
  @@schema("public")
}

model music_nft_authors_publishers {
  id        String     @id @unique
  nft_id    String
  address   String?
  name      String
  role      String
  music_nft music_nfts @relation(fields: [nft_id], references: [id])

  @@index([nft_id])
  @@index([address])
  @@schema("public")
}

enum music_nft_file_type {
  Audio
  Video
  Artwork

  @@schema("public")
}

model music_nft_files {
  id         String              @id @unique
  nft_id     String
  file_type  music_nft_file_type
  cid        String // ipfs://..., ar://..., s3://..., https://...
  music_nft  music_nfts          @relation(fields: [nft_id], references: [id])
  name       String
  size       Int
  mimetype   String
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now()) @updatedAt

  @@index([nft_id])
  @@index([cid])
  @@schema("public")
}

model multisig_wallets {
  id          String  @id @unique
  name        String
  description String?
  threshold   Int
  pubkey      String

  members multisig_wallet_members[]
  txs     multisig_wallet_txs[]

  created_at DateTime @default(now())

  @@schema("multisig")
}

model multisig_wallet_members {
  id        String  @id @unique
  wallet_id String
  index     Int
  name      String?
  address   String

  wallet multisig_wallets? @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id])
  @@index([address])
  @@schema("multisig")
}

model multisig_wallet_txs {
  id          String                          @id @unique
  wallet_id   String
  title       String
  description String?
  memo        String
  msgs        String
  fee         String
  hash        String?
  sequence    Int
  status      multisig_tx_status
  signatures  multisig_wallet_tx_signatures[]
  wallet      multisig_wallets?               @relation(fields: [wallet_id], references: [id])

  created_at DateTime @default(now())

  @@index([hash])
  @@index([wallet_id])
  @@schema("multisig")
}

enum multisig_tx_status {
  Pending_Signatures
  Pending_Execution
  Executed
  Failed

  @@schema("multisig")
}

model multisig_wallet_tx_signatures {
  id         String @id @unique
  tx_id      String
  address    String
  body_bytes String
  signature  String
  sequence   Int
  memo       String

  tx multisig_wallet_txs? @relation(fields: [tx_id], references: [id])

  created_at DateTime @default(now())

  @@index([tx_id])
  @@index([address])
  @@schema("multisig")
}

view nfttokenview {
  nft_id    String  @id @unique
  nft_name  String
  nft_image String?
  token_id  String
  owner     String

  @@schema("public")
}

model storage_ipfs {
  id         String                @id @unique
  name       String?
  size       Int                   @default(0)
  mimetype   String?
  created_at DateTime              @default(now())
  updated_at DateTime              @default(now()) @updatedAt
  owners     storage_ipfs_owners[]

  @@schema("public")
}

model storage_ipfs_owners {
  ipfs_id String
  owner   String
  file    storage_ipfs @relation(fields: [ipfs_id], references: [id])

  @@id([ipfs_id, owner])
  @@schema("public")
}

view nftview {
  id                  String    @id @unique
  block_height        Int
  tx_hash             String
  symbol              String
  name                String
  image               String?
  animation_url       String?
  uri                 String?
  payment_denom       String?
  payment_address     String?
  max_per_address     Int?
  seller_fee_bps      Int?
  referral_fee_bps    Int?
  start_time          DateTime?
  sale_type           String?
  marketplace_address String?
  ratio               Int?
  sender              String?
  volume              Int?
  last_price          Int?
  timestamp           DateTime?

  user User? @relation(fields: [sender], references: [address])

  @@schema("public")
}

view nftactivityview {
  id                  String   @id @unique
  block_height        Int
  tx_hash             String
  nft_id              String
  token_id            String
  side                String
  referral            String?
  royalties_recipient String?
  payment_denom       String?
  royalties           Int
  referral_fee        Int
  protocol_fee        Int
  total_price         Int
  sender              String
  timestamp           DateTime

  @@schema("public")
}

enum private_uploads_status {
  Pending
  Ready
  Failed

  @@schema("public")
}

model private_uploads {
  id          String   @id @unique
  user_id     String
  name        String?
  duration    Int
  size        Int
  mimetype    String
  artwork_cid String?
  audio_cid   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  status private_uploads_status

  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@schema("public")
}
